{"version":3,"sources":["components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","api.js","App.jsx","index.js"],"names":["TodoList","state","search","status","searcher","event","setState","target","value","statusChanger","statusFilter","todo","completed","this","props","todos","checkedChanger","selectUser","className","type","id","placeholder","onChange","name","limit","filter","map","title","toLowerCase","trim","includes","key","checked","onClick","onKeyDown","userId","React","Component","CurrentUser","userToPrint","loadData","prevProps","fetch","then","json","user","data","newTodos","clear","email","phone","App","selectedUserId","check","item","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ffbf2c61.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './TodoList.scss';\n\nexport class TodoList extends React.Component {\n  state = {\n    search: '',\n    status: '',\n  }\n\n  searcher = (event) => {\n    this.setState({\n      search: event.target.value,\n    });\n  };\n\n  statusChanger = (event) => {\n    this.setState({\n      status: event.target.value,\n    });\n  };\n\n  statusFilter = (todo) => {\n    if (this.state.status === 'Active') {\n      return !todo.completed;\n    }\n\n    if (this.state.status === 'Completed') {\n      return todo.completed;\n    }\n\n    return true;\n  };\n\n  render() {\n    const { todos, checkedChanger, selectUser } = this.props;\n    const { search } = this.state;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <div className=\"TodoList__filters\">\n            <input\n              type=\"text\"\n              id=\"search-query\"\n              className=\"TodoList__input\"\n              placeholder=\"Type a search word\"\n              value={this.state.search}\n              onChange={this.searcher}\n            />\n\n            <select\n              className=\"TodoList__statusChanger\"\n              name=\"statusChanger\"\n              onChange={this.statusChanger}\n              value={this.state.limit}\n            >\n              <option value=\"All\">All</option>\n              <option value=\"Active\">Active</option>\n              <option value=\"Completed\">Completed</option>\n            </select>\n          </div>\n\n          <ul className=\"TodoList__list\">\n\n            {todos.filter(todo => this.statusFilter(todo)).map((todo) => {\n              if (\n                todo.title !== null\n                && todo.title\n                  .toLowerCase()\n                  .trim()\n                  .includes(search.trim().toLowerCase())\n              ) {\n                return (\n                  <li\n                    className={\n                      todo.completed\n                        ? 'TodoList__item TodoList__item--checked'\n                        : 'TodoList__item TodoList__item--unchecked'\n                    }\n                    key={todo.id}\n                  >\n                    <label>\n                      <input\n                        type=\"checkbox\"\n                        checked={todo.completed}\n                        onClick={event => checkedChanger(todo)}\n                        onKeyDown={event => checkedChanger(todo)}\n                      />\n                      <p>{todo.title}</p>\n                    </label>\n\n                    <button\n                      className=\"TodoList__user-button button\"\n                      type=\"button\"\n                      onClick={() => selectUser(todo.userId)}\n                    >\n                      User&nbsp;#\n                      {todo.userId}\n                    </button>\n                  </li>\n                );\n              }\n\n              return (<></>);\n            })}\n          </ul>\n        </div>\n      </div>\n\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    userId: PropTypes.number.isRequired,\n    completed: PropTypes.bool.isRequired,\n  })).isRequired,\n  checkedChanger: PropTypes.func.isRequired,\n  selectUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api';\n\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    userToPrint: null,\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadData();\n    }\n  }\n\n  async loadData() {\n    const newTodos = await getUser(this.props.userId).then(user => user.data);\n\n    this.setState({\n      userToPrint: newTodos,\n    });\n  }\n\n  render() {\n    const { userToPrint } = this.state;\n    const { clear } = this.props;\n\n    return (\n      <>\n        {this.state.userToPrint ? (\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                Selected user:\n                {userToPrint.id}\n              </span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">{userToPrint.name}</h3>\n            <p className=\"CurrentUser__email\">{userToPrint.email}</p>\n            <p className=\"CurrentUser__phone\">{userToPrint.phone}</p>\n            <button\n              type=\"button\"\n              className=\"CurrentUser__button\"\n              onClick={clear}\n            >\n              Clear\n            </button>\n          </div>\n        ) : '...loading'}\n      </>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clear: PropTypes.func.isRequired,\n};\n","const url = 'https://mate-api.herokuapp.com/todos';\n\nexport function getAll() {\n  return fetch(url)\n    .then(todos => todos.json());\n}\n\nexport function getUser(userId) {\n  return fetch(`https://mate-api.herokuapp.com/users/${userId}`)\n    .then(todos => todos.json());\n}\n","import React from 'react';\nimport { getAll } from './api';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  checkedChanger = (todo) => {\n    const check = !todo.completed;\n\n    this.setState(state => ({\n      todos: state.todos.map(\n        item => (item.id === todo.id\n          ? {\n            ...item, completed: check,\n          }\n          : item\n        ),\n      ),\n    }));\n  }\n\n  selectUser = (userId) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  }\n\n  clear = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  async loadData() {\n    const newTodos = await getAll().then(todos => todos.data);\n\n    this.setState({\n      todos: [...newTodos],\n    });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            checkedChanger={this.checkedChanger}\n            selectUser={this.selectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clear={this.clear}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}